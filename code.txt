#include<conio.h>
#include<stdlib.h>
#include<stdio.h>
#include<math.h>
#include <time.h>
#include<graphics.h>
#include<dos.h>
#define pi 3.14
#define circle_division 30
#define donut_division 40

typedef struct coor {
	int x;
	int y;
	int z;
} coor;

typedef struct normalized_vector {
	double x;
	double y;
	double z;
} normalized_vector;

const coor screen_center = {320, 240, 0};
const coor circle_center = {420, 240, 0};
const coor donut_center = {320, 240, 0};
const coor light_source = {0, 0, 0};
const coor cube_center = {320, 240, 0};
const coor square_center = {320, 240, 0};

const int radius = 50;

void get_circle(coor circle[]) {
	int i;
	for(i=0; i<circle_division; i++) {
		circle[i].x=circle_center.x + (int)(radius*cos((2*pi/360)*(i*360/circle_division)+0.5));
		circle[i].y=circle_center.y - (int)(radius*sin((2*pi/360)*(i*360/circle_division)+0.5));
		circle[i].z=0;
	}

}

void get_donut(coor donut[][circle_division], coor circle[]) {
	int i, j;
	for(i=0; i<donut_division; i++) {
		for(j=0; j<circle_division; j++) {
			donut[i][j].y = circle[j].y;
			donut[i][j].x = donut_center.x + (int)(donut_center.x - circle[j].x) *cos((2*pi/360)*(i*360/donut_division));
			donut[i][j].z = (int)(donut_center.x - circle[j].x) *sin((2*pi/360)*(i*360/donut_division));
		}
	}
}

void rotate_x(int degree, coor center, coor shape[][circle_division]){
	int i, j;
	coor curr;
	for(i=0; i<donut_division; i++) {
		for(j=0; j<circle_division; j++) {
			curr = shape[i][j];
			shape[i][j].x = center.x + (donut_center.x-curr.x);
			shape[i][j].y = center.y + (int)((center.y-curr.y) * cos((2*pi/360)*degree) + curr.z * sin((2*pi/360)*degree));
			shape[i][j].z = center.z + (int)(curr.z * cos((2*pi/360)*degree) - (center.y - curr.y) * sin((2*pi/360)*degree));
		}
	}
}

void rotate_z(int degree, coor center, coor shape[][circle_division]){
	int i, j;
	coor curr;
	for(i=0; i<donut_division; i++) {
		for(j=0; j<circle_division; j++) {
			curr = shape[i][j];
			shape[i][j].x = center.x + (int)((center.x-curr.x) * cos((2*pi/360)*degree) - (center.y - curr.y) * sin((2*pi/360)*degree));
			shape[i][j].y = center.y + (int)((center.y-curr.y) * cos((2*pi/360)*degree) + (center.x - curr.x) * sin((2*pi/360)*degree));
			shape[i][j].z = center.z + (donut_center.z-curr.z);
		}
	}
}

void rotate_y(int degree, coor center, coor shape[][circle_division]){
	int i, j;
	coor curr;
	for(i=0; i<donut_division; i++) {
		for(j=0; j<circle_division; j++) {
			curr = shape[i][j];
			shape[i][j].x = center.x + (int)((center.x - curr.x) * cos((2*pi/360)*degree) - (curr.z) * sin((2*pi/360)*degree));
			shape[i][j].y = center.y + (donut_center.y - curr.y);
			shape[i][j].z = (int)(curr.z * cos((2*pi/360)*degree) + (center.x - curr.x) * sin((2*pi/360)*degree));
		}
	}
}

void transform(coor shape[][circle_division], int a, int b, int c) {
	int i, j;
	for(i=0; i<donut_division; i++) {
		for(j=0; j<circle_division; j++) {
			shape[i][j].x+=a;
			shape[i][j].y+=b;
			shape[i][j].z+=c;
		}
	}
}

void get_donut_normals(coor donut[][circle_division],coor donut_normal[][circle_division]) {
	int i, j;
	coor curr_center;
	coor curr_normal;
	for(i=0; i<donut_division; i++) {
		curr_center.x = donut[i][0].x + (donut[i][donut_division/2].x - donut[i][0].x)/2;
		curr_center.y = donut[i][0].y + (donut[i][donut_division/2].y - donut[i][0].y)/2;
		curr_center.z = donut[i][0].z + (donut[i][donut_division/2].z - donut[i][0].z)/2;
		for(j=0; j<circle_division; j++) {
			curr_normal.x = donut[i][j].x - curr_center.x;
			curr_normal.y = donut[i][j].y - curr_center.y;
			curr_normal.z = donut[i][j].z - curr_center.z;
			donut_normal[i][j] = curr_normal;
		}
	}
}

normalized_vector normalize(coor vector) {
	normalized_vector ans;
	double xi, yj, zk;
	double magnitude;
	magnitude = sqrt((long int)(vector.x)*(vector.x)+(long int)(vector.y)*(vector.y)+(long int)(vector.z)*(vector.z));
	xi = (vector.x)/magnitude;
	yj = (vector.y)/magnitude;
	zk = (vector.z)/magnitude;
	ans.x = xi;
	ans.y = yj;
	ans.z = zk;
	return ans;
}

char light_gradient2(coor normal, coor curr) {
	char currChar;
	coor to_light_vector;
	normalized_vector anv, bnv;
	double dot_product;
	to_light_vector.x = light_source.x-curr.x;
	to_light_vector.y = -light_source.y+curr.y;
	to_light_vector.z = light_source.z-curr.z;
	anv = normalize(normal);
	bnv = normalize(to_light_vector);
	dot_product = anv.x*bnv.x + anv.y*bnv.y + anv.z*bnv.z;
	if(dot_product>0.6) currChar='@';
	else if(dot_product>0.3) currChar='#';
	else if(dot_product>0) currChar='!';
	else if(dot_product>-0.3) currChar=';';
	else if(dot_product>-0.6) currChar='_';
	else currChar='.';
	return currChar;
}

void clear_screen(char screen [48][72]) {
	int i, j;
	for(i=0; i<48; i++) {
		for(j=0; j<72; j++) {
			screen[i][j]=' ';
		}
	}
}

void plot_2d(coor shape[][circle_division], coor donut_normal[][circle_division], char screen[48][72]) {
	int i, j;
	char curr_gradient[2];
	for(i=0; i<donut_division; i++) {
		for(j=0; j<circle_division; j++) {
			if(screen[shape[i][j].x/10][shape[i][j].y/10]==' ') {
				curr_gradient[0]=light_gradient2(donut_normal[i][j], shape[i][j]);
				curr_gradient[1]='\0';
				screen[shape[i][j].x/10][shape[i][j].y/10]='-';
				outtextxy(shape[i][j].x/10*10, shape[i][j].y/10*10, curr_gradient);
			} else continue;

		}
	}
}

void main() {
	int gmode, gdriver=DETECT;
	int x_rotation, y_rotation, z_rotation, i=1;
	char screen[48][72];
	coor rcenter = screen_center;
	coor circle[circle_division], donut[donut_division][circle_division];
	coor donut_normal[donut_division][circle_division];
	system("cls");
	scanf("%d%d%d", &x_rotation, &y_rotation, &z_rotation);
	initgraph(&gdriver, &gmode, "\c:\\TURBOC3\\bgi");
	get_circle(circle);
	while(i++) {
		clear_screen(screen);
		get_donut(donut, circle);
		transform(donut, 0, 0, 0);
		rotate_x(x_rotation*i, rcenter, donut);
		rotate_y(y_rotation*i, rcenter, donut);
		rotate_z(z_rotation*i, rcenter, donut);
		get_donut_normals(donut, donut_normal);
		delay(200);
		cleardevice();
		plot_2d(donut, donut_normal, screen);
		if(kbhit()) break;
	}
	closegraph();
	getch();
}